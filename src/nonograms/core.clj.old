
;; (defn perm2 [constraint max-width]
;;   (let [permc (permutate constraint max-width [])]
;;     (go
;;       (loop []
;;         (when-let [p (<! permc)]
;;           (println "ok!!" p)
;;           (recur)
;;           )))
;;       )
;;     )

;; (pprint "+++++++++++++++++++++++++++")
;; (perm2 [1 2] 9)
;; (def c (perm2 [1 2 1] 9))
;; (pprint  (perm2 [1 2 1] 9))

;; (go (println "It works!" (<! c)))
;; (go (println "It works!" (<! c)))


;; (defn empty-solution [board]
;;  (repeat (height board) (repeat (width board) nil)) 
;;   )



;; (solve board (empty-solution board) 0)

;; (defn -main
;;   "I don't do a whole lot ... yet."
;;   [& args]
;;   (println "Hello, World!"))


;; (def grid {
;;            :size [4 4]
;;            :rows [[1 2] [4] [1] [2]]
;;            :columns [ [1] [4] [1] [1]]
;;            })

;; (def solution [ [0 0 0 1 1 0] [1 1 0 0 1 0]
;;                [ 1 1 1 0 0 1] 
;;             ])

;; (defn transpose-matrix [matrix]
;;   (apply mapv vector matrix))

;; (defn test-row [row]
;;          (->> row
;;            (partition-by identity)
;;            (filter (fn [[x & more]] (= x 1)))
;;            (map count)
;;            ))


;; (defn check [grid solution]
;;   (and
;;    (= (:rows grid) (map test-row solution))
;;    (= (:columns grid) (map test-row (transpose-matrix solution))))
  
;;   )


;; (test-row [0 0 1 1 1 0 1 1 0])


;; (check solution grid)
;; (check grid [[ 1 0] [ 0 1]] )

;; (defn solve-array [l constraint]
;;   (if (= l (+  (apply + constraint) (dec (count constraint))))
;;    (rest  (flatten (map (fn [n]  (conj  (repeat n 1) 0)) constraint)))
;;     (repeat l nil)
;;     )
;;   )

;; (defn compare-places [x y]
;;   (cond (= x y) y
;;         (and (not (nil? x)) (not (nil? y))) :no-way
;;         :default (or x y)
;;         ))

;; ;; (compare-places nil nil)
;; ;; (compare-places 1 nil)
;; ;; (compare-places nil 0)
;; ;; (compare-places 1 0)
;; (map (partial solve-array 5) (:columns grid) )

;; (defn two-v-of-vs [grid]
;;   [(map (partial solve-array (first (:size grid))) (:rows grid) )
;;    (transpose-matrix (map (partial solve-array (second (:size grid))) (:columns grid) ))]
;;   )

;; (defn it-sol [grid]
;;   (apply map (fn [r1 r2] (map compare-places r1 r2)) (two-v-of-vs grid))
;;   )

;; (def first-sol (it-sol grid))

;; (defn index-of-zeros [v]  (map second (filter (fn [[x y]] (= x 0)) (map vector v (range (count v))))))

;; (index-of-zeros [0 1 0])

;; (defn solve-array2 [l constraint partial-sol]
;;   (index-of-zeros (first partial-sol))
;;   )



;; (defn permutate-async2-draft [constraint max-width end-blocks]
;;   "Returns a channel that will keep delivering new permutations of a constraint and nil when all there are no more permutations possible"
;;   (let [line (left-most constraint)
;;         partial-constraint (butlast constraint)
;;         permutations [(concat line end-blocks)]]
;;     (println (concat  line end-blocks) )
;;     (if partial-constraint
;;       (loop  [line (move-right-block-by-one line max-width)]
;;         (if line
;;           (let [
;;                 partial-width (dec (first (last line)))
;;                 new-end-blocks (cons  (last line) end-blocks)
;;                 ]
;;             (permutate partial-constraint partial-width new-end-blocks)
;;             (recur (move-right-block-by-one line max-width)))))

      
;;       (loop  [line (move-right-block-by-one line max-width)]
;;         (if line
;;           (do (println (concat line end-blocks))
;;               (recur (move-right-block-by-one line max-width)))
;;           )))
;;     permutations
;;     ))



;; (defn permutate-async [constraint max-width end-blocks]
;;   "Returns a channel that will keep delivering new permutations of a constraint and nil when all there are no more permutations possible"
;;   (let [c (chan 1)
;;         line (left-most constraint)]
;;     (go
;;       (>! c (concat  line end-blocks) )
;;       (loop  [line (move-right-block-by-one line max-width)]
;;         (if line
;;           (let  [partial-constraint (butlast constraint)
;;                  partial-width (dec (first (last line)))
;;                  new-end-blocks (cons  (last line) end-blocks)]
;;             (if partial-constraint 
;;               (let [subc (permutate-async partial-constraint partial-width new-end-blocks)]
;;                 (loop []
;;                   (when-let [p (<! subc)]
;;                     (>! c p) (recur))))
;;               (>! c (concat line end-blocks)))
;;             (recur (move-right-block-by-one line max-width)))))
;;       (close! c))
;;     c))

;; (defn dive-asynrr
;;                 (when-let [p2 (<! ch2)]
;;                   (>! c (cons (line p width) p2))
;;                   (recur)))
;;               )
;;             (>! c [(line p width)])
;;             )
;;           (recur)))
;;       (close! c))
;;     c))

;; (defn print-all-solutions-async
;;   ""
;;   [board]
;;   (let [width (width board)
;;         permutate (fn [constraint] (permutate-async constraint width []))
;;         rows (:rows board)
;;         solutions (dive-async permutate (first rows) (rest rows) width)
;;         ]
;;     (go
;;       (println  (loop [result []]
;;                     (let [s (<! solutions)]
;;                       (if s
;;                         (recur (conj result s))
;;                         result))
;;                     ))
;;       )
;;   ))

;; (print-all-solutions-async board)

;; (defn inc-at
;;   "Increases number in vector v at position n by one. The number flips over to 0 when it's bigger than the base of this position, in this case the :carry tag of the returned tuple is :t. The :indices tag's value is the increased indices vector"
;;   [v n bases]
;;   (let [i (inc (nth v n))
;;         b (nth bases n)]
;;     ;; (println "in inc-at" v n)
;;     {:indices (vec (flatten [(subvec v 0 n) (rem i b) (subvec v (inc n))]))
;;      :carry (if  (= 1 (quot i b)) :t)}))

;; ;; (inc-at [0 1 4 3 4] 2 [5 5 5 5])

;; (defn inc-vec
;;   "Increases the value in indices by one, treating it as a number with a specified base per index. Returns nil if trying to increase max value possible "
;;   [indices bases]

;;   (let [l (- (count indices) 1)]
;;     (loop [ i l
;;             temp (inc-at indices i bases)]
;;       (if (:carry temp)
;;         (if (> i 0)
;;           (recur (dec i) (inc-at (:indices temp) (dec i) bases)))
;;         (:indices temp)))))

;; ;; (inc-vec [0 0 0 0] [3 3 3 3])

;; (defn values-at
;;   "Uses indices to retrieve and return the values at the corresponding vectors in vectors as a seq"
;;   [indices vectors]
;;   (let [fns (map (fn [index] (fn [coll] (nth coll index))) indices)]
;;     (map (fn [v] ((first v) (second v))) (partition 2 (interleave fns vectors)))))

;; ;; (values-at [0 1 1] [['a 'b] ['c 'd] ['e 'f]])


;; ;;********************
;; ;;********************
;; ;;********************


;; (defn dive-by-indices
;;   "Returns a channel that delivers all possible combinations of permutations of row constraints by enumeration"
;;   [board]
;;   (let [
;;         width (width board)
;;         permutate (fn [constraint] (permutate constraint width []))
;;         rows (map permutate (:rows board))
;;         c (chan 1)
;;         bases (map count rows)]
;;     (go
;;       (loop [indices (vec (repeat (count rows) 0))]
;;         (>! c (map (fn [blocks] (line blocks width))  (values-at indices rows)))
;;         (if indices
;;           (recur (inc-vec indices bases)))))
;;     c))

;; (defn empty-solution [board]
;;  (repeat (height board) (repeat (width board) nil)) 
;;   )